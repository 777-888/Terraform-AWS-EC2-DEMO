ðŸ“„ provider.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  required_version = ">= 1.5.0"
}

provider "aws" {
  region = var.region
}
ðŸ“„ variables.tf
variable "region" {
  description = "AWS region to deploy resources into"
  type        = string
  default     = "eu-west-2" # London
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
  default     = "t2.micro"
}

variable "ami_id" {
  description = "Amazon Linux 2 AMI ID (must match the region)"
  type        = string
}
ðŸ“„ main.tf
resource "aws_instance" "demo" {
  ami           = var.ami_id
  instance_type = var.instance_type

  tags = {
    Name = "Terraform-EC2-Demo"
  }
}
ðŸ“„ outputs.tf
output "instance_id" {
  description = "The ID of the EC2 instance"
  value       = aws_instance.demo.id
}

output "public_ip" {
  description = "The public IP address of the EC2 instance"
  value       = aws_instance.demo.public_ip
}
ðŸ“„ terraform.tfvars (optional â€“ donâ€™t commit if it has sensitive data)

ami_id = "ami-0c55b159cbfafe1f0" # Replace with a valid Amazon Linux 2 AMI for eu-west-2

ðŸš¦ How to run it

terraform init
terraform plan
terraform apply
Youâ€™ll get back the instance_id and public_ip when it spins up.

âš¡ Pro tip: check the right Amazon Linux 2 AMI for your region here or via CLI:
aws ec2 describe-images \
  --owners amazon \
  --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" "Name=state,Values=available" \
  --query "Images[*].[ImageId,Name]" \
  --region eu-west-2 \
  --output table
